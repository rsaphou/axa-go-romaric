Cr√©ation de la CI sur Rust 

- Cr√©er la Task
- Cr√©er la Pipeline
- Cr√©er la Pipeline Run
        #   apiVersion: tekton.dev/v1
        # kind: Task
        # metadata:
        #   name: install-tools
        # spec:
        #   steps:
        #     - name: setup-and-install
        #       # image: node:18
        #       image: registry.access.redhat.com/ubi8/nodejs-20
        #       #securityContext:
        #       #  runAsUser: 0
        #       script: |
        #         #!/bin/sh
        #         set -e
        #         export HOME=/tekton/home
                
        #         echo "npm installation step"
        #         # Set npm global path to writable directory
        #         mkdir -p "$HOME/.npm-global"
        #         npm config set prefix "$HOME/.npm-global"
        #         export PATH="$HOME/.npm-global/bin:$PATH"

        #         # Install Anypoint CLI
        #         npm install -g anypoint-cli-v4

        #         # Verify installation
        #         node -v
        #         npm -v
        #         anypoint-cli-v4 --version
        #         echo "‚úÖ Node: $(node -v)"
        #         echo "‚úÖ NPM: $(npm -v)"
        #         echo "‚úÖ Git: $(git --version)"
        #         echo "‚úÖ Curl: $(curl --version | head -n 1)"
        #         echo "‚úÖ Anypoint CLI: $(anypoint-cli-v4 --version)"

        #     - name: install-rust
        #       image: registry.access.redhat.com/ubi8/nodejs-20
        #       script: |
        #         #!/bin/sh
        #         set -e
        #         export HOME=/tekton/home  
        #         echo "Rust installation step"

        #         echo "üîß Using custom CA cert"
        #         export SSL_CERT_FILE=/etc/ssl/custom-ca/ca.crt

        #         if ! command -v rustc &> /dev/null
        #         then
        #           echo "Rust could not be found, installing it..."
        #           # Install Rust non-interactively
        #           curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y
        #           # Source the Rust environment (non-interactive)
        #           source $HOME/.cargo/env
        #         fi
        #         echo "‚úÖ Rust: $(rustc --version)"
        #       volumeMounts:
        #         - name: custom-ca
        #           mountPath: /etc/ssl/custom-ca
        #           readOnly: true
        #       env:
        #         - name: SSL_CERT_FILE
        #           value: /etc/ssl/custom-ca/ca.crt
        #   volumes:
        #     - name: custom-ca
        #       configMap:
        #         name: rust-certificate

        # ---
        # apiVersion: tekton.dev/v1
        # kind: Pipeline
        # metadata:
        #   name: tools-install-pipeline
        # spec:
        #   tasks:
        #     - name: install-all
        #       taskRef:
        #         name: install-tools

        # ---
        # apiVersion: tekton.dev/v1
        # kind: PipelineRun
        # metadata:
        #   name: tools-install-run
        # spec:
        #   taskRunTemplate:
        #         serviceAccountName: sa-docker
        #   pipelineRef:
        #     name: tools-install-pipeline


- Cr√©er des configs Map avec les diff√©rents certificat de Rust 
  Afficher les certificats de Rust 
    "openssl s_client -showcerts -servername static.rust-lang.org static.rust-lang.org:443"
    "openssl s_client -showcerts -servername sh.rustup.rs -connect sh.rustup.rs:443"
  Cr√©er la configmap avec tous les certificat 
   "oc create configmap rust-certificate --from-file=ca.crt=rust-certificate.pem"

- Adding CArgo and Web WASI
rustup target add wasm32-wasi
cargo install --locked cargo-generate


-- To delete Task and Pipeline 
oc delete task install-tools && oc delete pipeline tools-install-pipeline && oc delete pipelinerun tools-install-run 

--- To Create pipeline 
oc apply -f global-image-custom.yaml  