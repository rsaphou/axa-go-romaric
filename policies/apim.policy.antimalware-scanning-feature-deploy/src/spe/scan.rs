use serde::{Deserialize, Serialize};
use chrono::{DateTime, Local};

#[derive(Serialize, Deserialize,Debug)]
#[allow(non_snake_case)]
pub struct ScanResult {
    pub scanStatus: String,
    pub fileScanned: String,
    pub fileStatus: String,
    pub fileQuarantineStatus: String,
    pub totalInfections: i16,
    pub virusDefinitionDate: DateTime<Local>,
    pub virusDefinitionRevisionNumber: String,
    pub bytesScanned: i16,
    pub totalFilesScanned: i16,
    pub trueTypeOfFile: String,
}

impl ScanResult {
    pub fn has_infections(&self) -> bool {
        (self.totalInfections).gt(&0)
    }
}

pub enum ScanningError {
    Infected(ScanResult),
    ServerError(String)
}
impl From<multer::Error> for ScanningError {
    fn from(_: multer::Error) -> Self { todo!() }
}
pub enum SPECallError {
    ServerError(String)
}
