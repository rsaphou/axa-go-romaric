use chrono::{Local, TimeZone};
use pdk::hl::{Service, HttpClient};
use crate::generated::config::Config;
use crate::spe::token::SPEToken;
use crate::spe::scan::{ScanningError,SPECallError,ScanResult};
use pdk::logger;
use json::object;
use pdk::hl::*;


pub async fn get_spe_token(
    config: &Config,
    client: &HttpClient
) -> Result<SPEToken, SPECallError> {
    let map = object!{
        userName: &*config.user_name.to_string(),
        password: &*config.password.to_string()
    };
        //client.request(&_config.local_service).path(&_config.local_basepath)
    //match client.request(service).path(&config.auth_path)

    logger::debug!("********** Call the Token ************* path {}", &config.auth_path);
    match client.request(&config.host).path(&config.auth_path)
    .headers(vec![("content-type", "application/json"),("cache-control","no-cache"),("accept","*/*"),("accept-encoding","gzip, deflate, br")])
    .body(map.dump().as_bytes())
    .post().await {
        Ok(resp) => {
            if [200, 202, 204].contains(&resp.status_code()) {
                // extract response to token object
                let token_received : SPEToken = serde_json::from_slice(resp.body()).unwrap();
                logger::debug!("Token obtained successfully from server! Token expiration Date  {:#?}", Local.timestamp_opt( token_received.access_token_expiration_time as i64, 0).unwrap());
                Ok(token_received)
            }
            else{
                logger::warn!("Unexpected response from SPE Authentication service: {} - {}",resp.status_code(),String::from_utf8_lossy(resp.body()));
                return Err(SPECallError::ServerError(String::from_utf8_lossy(resp.body()).to_string()));
            }
        }
        Err(e) => {
            return Err(SPECallError::ServerError(e.to_string()));
        }
    }
}


pub async fn scan_file_by_spe(
    config: &Config,
    content_type: String,
    body_state: &RequestBodyState,
    token: &SPEToken,
    client: HttpClient
) -> Result<ScanResult, ScanningError> {
    let body = body_state.handler().body();
    logger::info!("Scan Starting !" );
    let owned_string: String = "Bearer ".to_owned();
    let another_owned_string: String = owned_string + &token.access_token[0..];
    match client.request(&config.host).path(&config.scan_path)
    .headers(vec![("Authorization",&another_owned_string),("content-type", &content_type),("cache-control","no-cache"),("accept","application/json"),("accept-encoding","gzip, deflate, br")])
    .body(&body)
    .post().await {
        Ok(resp) => {
            if [200, 202, 204].contains(&resp.status_code()) {
                // extract response to token object
                let result_received : ScanResult = serde_json::from_slice(resp.body()).unwrap();
                logger::info!("Scan result obtained successfully! {:#?}", result_received );
                if result_received.has_infections() {
                    return Err(ScanningError::Infected(result_received));
                }
                Ok(result_received)
            }
            else{
                logger::warn!("Unexpected response from SPE Scan service: {} - {}",resp.status_code(),String::from_utf8_lossy(resp.body()));
                return Err(ScanningError::ServerError(String::from_utf8_lossy(resp.body()).to_string()));
            }
        }
        Err(e) => {
            return Err(ScanningError::ServerError(e.to_string()));
        }
    }
}

pub async fn scan_file_by_spez(
    config: &Config,
    content_type: String,
    body: &Vec<u8>,
    token: &SPEToken,
    client: &HttpClient
) -> Result<ScanResult, ScanningError> {
    logger::info!("Scan Starting !" );
    let owned_string: String = "Bearer ".to_owned();
    let another_owned_string: String = owned_string + &token.access_token[0..];
    match client.request(&config.host).path(&config.scan_path)
    .headers(vec![("Authorization",&another_owned_string),("content-type", &content_type),("cache-control","no-cache"),("accept","application/json"),("accept-encoding","gzip, deflate, br")])
    .body(&body)
    .post().await {
        Ok(resp) => {
            if [200, 202, 204].contains(&resp.status_code()) {
                // extract response to token object
                let result_received : ScanResult = serde_json::from_slice(resp.body()).unwrap();
                logger::info!("Scan result obtained successfully! {:#?}", result_received );
                if result_received.has_infections() {
                    return Err(ScanningError::Infected(result_received));
                }
                Ok(result_received)
            }
            else{
                logger::warn!("Unexpected response from SPE Scan service: {} - {}",resp.status_code(),String::from_utf8_lossy(resp.body()));
                return Err(ScanningError::ServerError(String::from_utf8_lossy(resp.body()).to_string()));
            }
        }
        Err(e) => {
            return Err(ScanningError::ServerError(e.to_string()));
        }
    }
}
